name: Build, Test, and Publish
on:
  push:
    branches:
      - main
      - dev
      - feature/*

jobs:
  build-test-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.0.x'  # Replace with the desired .NET Core version

      - name: Cache NuGet packages
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: nuget-packages-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9
        with:
            versionSpec: '5.1.x'

      - name: Get GitVersion information
        id: gitversion
        run: |
          version=$(gitversion /output json | jq -r '.FullSemVer')
          echo "::set-output name=version::${version}"

      - name: Set Application Version
        run: echo "##vso[build.updatebuildnumber]${{ steps.gitversion.outputs.version }}"

      - name: Build
        run: dotnet build --configuration Release

      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=test_results.trx"

      - name: Find Bootstrapper Project
        id: find-bootstrapper
        run: |
          bootstrapper_path=$(find . -path './src/Presentations/**/*BootstrapperApi.csproj' -type f -print -quit)
          echo "::set-output name=path::${bootstrapper_path}"

      - name: Publish
        run: dotnet publish --configuration Release --no-build --output ./publish ${{ steps.find-bootstrapper.outputs.path }} /p:Version=${{ steps.gitversion.outputs.version }}

      - name: Create source code zip
        run: zip -r sample.modularmonolith.source-code.zip .

      - name: Publish source code zip
        uses: actions/upload-artifact@v2
        with:
          name: source-code
          path: sample.modularmonolith.source-code.zip

      - name: Generate Test Report
        uses: mikepenz/action-junit-report@v2
        with:
          report_paths: '**/test_results.trx'
          output_file: junit-report.xml
          
      - name: Publish Test Report
        uses: actions/upload-artifact@v2
        with:
          name: test-report
          path: junit-report.xml

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./publish/sample.modularmonolith.source-code.zip
          asset_name: sample.modularmonolith.source-code.zip
          asset_content_type: application/zip

      - name: Upload Test Report as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: junit-report.xml
          asset_name: junit-report.xml
          asset_content_type: application/xml
