name: Build, Test, and Publish
on:
  push:
    branches:
      - main
      - dev
      - feature/*

jobs:
  build-test-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.0.x'  # Replace with the desired .NET Core version

      - name: Cache NuGet packages
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: nuget-packages-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Install GitVersion.CommandLine
        run: dotnet tool install --global GitVersion.CommandLine

      - name: Get GitVersion information
        id: gitversion
        run: |
          gitversion_path=$(dotnet tool run gitversion --tool-path .)
          ${gitversion_path}/gitversion /output json > gitversion.json
          version=$(jq -r '.FullSemVer' gitversion.json)
          echo "::set-output name=version::${version}"

      - name: Set Application Version
        run: echo "##vso[build.updatebuildnumber]${{ steps.gitversion.outputs.version }}"

      - name: Build
        run: dotnet build --configuration Release

      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=test_results.trx"

      - name: Find Bootstrapper Project
        id: find-bootstrapper
        run: |
          bootstrapper_path=$(find . -path './src/Presentations/**/*BootstrapperApi.csproj' -type f -print -quit)
          echo "::set-output name=path::${bootstrapper_path}"

      - name: Publish
        run: dotnet publish --configuration Release --no-build --output ./publish ${{ steps.find-bootstrapper.outputs.path }} /p:Version=${{ steps.gitversion.outputs.version }}

      - name: Create source code zip
        run: zip -r sample.modularmonolith.source-code.zip .

      - name: Publish source code zip
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          files: |
            ./sample.modularmonolith.source-code.zip
          draft: ${{ github.ref == 'refs/heads/main' }}
          prerelease: ${{ github.ref == 'refs/heads/dev' }}
